<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1499330853754">{:repl-history {:ide [], :local [&quot;(nil? args)&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (or (-&gt; opts :options :help) (nil? args))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(def args '(\&quot;-h\&quot; \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot;))&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot;))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   ])&quot; &quot;(ns cli.db\n   (:require [clojure.java.jdbc :as sql]))&quot; &quot;(def db {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:thin\&quot;\n         :subname        \&quot;127.0.0.1:1521:orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(time (sql/query db [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(time (sql/query db [\&quot;select sysdate from dual\&quot;] {:as-arrays? true}))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 4] \n                 ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:result-set-fn first} ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn first} ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn nfirst 2} ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn (nfirst 2)} ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn #(nfirst 2)} ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn nfirst } ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn 2 nfirst } ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true :result-set-fn #(nfirst) 2 } ))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects where rownum&lt;?\&quot; 10000] \n                 {:as-arrays? true } ))&quot; &quot;(sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total row-map]\n                                       (+ total 1)))\n                             0 rs)})&quot; &quot;(sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total row-map]\n                                       (+ total 1))\n                             0 rs))})&quot; &quot;(sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total ]\n                                       (+ total 1))\n                             0 rs))})&quot; &quot;(sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total _]\n                                       (+ total 1))\n                             0 rs))})&quot; &quot;(time (sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total ]\n                                       (+ total 1))\n                             0 rs))}))&quot; &quot;(reduce + (1 2 3))&quot; &quot;(reduce + '(1 2 3))&quot; &quot;(reduce + [1 2 3])&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;@alandb\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(time (sql/query db [\&quot;select count(*) from all_objects where rownum&lt;900\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select count(*) from all_objects where rownum&lt;900\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total _]\n                                       (+ total 1))\n                             0 rs))}))&quot; &quot;(time (sql/query db [\&quot;select * from all_objects where rownum&lt;900\&quot;]\n           {:result-set-fn (fn [rs]\n                             (reduce (fn [total _]\n                                       (+ total 1))\n                             0 rs))}))&quot; &quot;(time (sql/query db [\&quot;SELECT * FROM all_objects WHERE rownum &lt; ?\&quot; 50]\n         {:row-fn (fn [row] (assoc row :cnt 1))\n          :result-set-fn (partial reduce +)}))&quot; &quot;(apply #(fn [_] 1) '(1 2 3))&quot; &quot;(apply #(fn [_] 1) '(111))&quot; &quot;(apply (fn [_] 1) [1])&quot; &quot;(apply (fn [_] 1) [1 2])&quot; &quot;(apply (fn [_] 1) 2)&quot; &quot;(apply (fn [_] 1) [2])&quot; &quot;(time (sql/query db1 [\&quot;SELECT * FROM all_objects WHERE rownum &lt; ?\&quot; 50]\n         {:row-fn (fn [_] 1)\n          :result-set-fn (partial reduce +)}))&quot; &quot;(time (sql/query db [\&quot;select * from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name 对象名称 from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true}))&quot; &quot;(time (sql/query db [\&quot;SELECT * FROM all_objects WHERE rownum &lt; ?\&quot; 50]\n         {:row-fn (fn [_] 1)\n          :result-set-fn (partial reduce +)}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name 对象名称 from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true :identifiers identity}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name  from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true :identifiers identity}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name  from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true }))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;obj\\\&quot; from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true }))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;OBJ\\\&quot; from all_objects where rownum&lt;?\&quot; 4] {:as-arrays? true }))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;OBJ\\\&quot; from all_objects where rownum&lt;?\&quot; 4] \n                 {:as-arrays? true :entities identity}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;OBJ\\\&quot; from all_objects where rownum&lt;?\&quot; 4] \n                 {:as-arrays? true :identifiers identity}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;obj\\\&quot; from all_objects where rownum&lt;?\&quot; 4] \n                 {:as-arrays? true :identifiers identity}))&quot; &quot;(.name :abc)&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;obj\\\&quot; from all_objects where rownum&lt;?\&quot; 4] \n                 {:as-arrays? true :identifiers .getName}))&quot; &quot;(time (sql/query db [\&quot;select owner 属主,object_name \\\&quot;obj\\\&quot; from all_objects where rownum&lt;?\&quot; 4] \n                 {:as-arrays? true :identifiers #(.getName)}))&quot; &quot;(let [{foo :foo bar :bar} {:foo \&quot;foo\&quot; :bar \&quot;bar\&quot;}]\n  (println foo bar))&quot; &quot;(println :foo)&quot; &quot;(map .getName [:abc :bbb])&quot; &quot;(.getName :abc)&quot; &quot;(map .getName '(:abc))&quot; &quot;(map name [:abc :bbb])&quot; &quot;(vec (map name [:abc :bbb]))&quot; &quot;(vec (map name [:东奔西走 :bbb]))&quot; &quot;(re-split #\\  \&quot;234 3e43 sdf df\&quot;)&quot; &quot;(re-split #\&quot; \&quot;  \&quot;234 3e43 sdf df\&quot;)&quot; &quot;(use 'clojure.contrib.str-utils)&quot; &quot;(re-find #\&quot;d.\&quot; \&quot;bad 1.1.0\&quot;)&quot; &quot;(re-find #\&quot;\\d.\&quot; \&quot;bad 1.1.0\&quot;)&quot; &quot;(re-find #\&quot;\\d\&quot; \&quot;adf 1.1.1\&quot;)&quot; &quot;(re-seq #\&quot;\\d.\&quot; \&quot;abc 1.1.1\&quot;)&quot; &quot;(def phone-num \&quot;672-345-455-2323\&quot;)&quot; &quot;(def matcher (re-matcher #\&quot;((\\d+)-(\\d+))\&quot; phone-num))&quot; &quot;(re-find matcher )&quot; &quot;(re-groups matcher )&quot; &quot;(ns cli.core-test\n  (:refer-clojure :exclude [parse-opts])\n  (:require [clojure.test :refer :all]\n            [clojure.tools.cli :refer [parse-opts]]\n            [cli.core :refer :all]))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno\&quot; \&quot;sheet No.\&quot;]\n   ])&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot; \&quot;--sno\&quot; \&quot;1\&quot; \&quot;--sno\&quot; \&quot;2\&quot;))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname\&quot; \&quot;sheet name\&quot;]\n   ])&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname\&quot; \&quot;sheet name\&quot;]\n   ])&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname\&quot; \&quot;sheet name\&quot;]\n   ])&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno SNO\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname SName\&quot; \&quot;sheet name\&quot;]\n   ])&quot; &quot;(conj nil \&quot;abc\&quot;)&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno SNO\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname SName\&quot; \&quot;sheet name\&quot;\n    :default ()\n    :assoc-fn (fn [m k v] (update-in m [k] conj v))]\n   ])&quot; &quot;(into [] \&quot;abc\&quot;)&quot; &quot;(into [] (seq \&quot;abc\&quot;))&quot; &quot;(vec \&quot;abc\&quot;)&quot; &quot;(vector \&quot;abc\&quot;)&quot; &quot;(into [] (vector \&quot;abc\&quot;))&quot; &quot;(into [\&quot;ddd\&quot;] (vector \&quot;abc\&quot;))&quot; &quot;(into nil (vector \&quot;abc\&quot;))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno SNO\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname SName\&quot; \&quot;sheet name\&quot;\n    :default []\n    :assoc-fn (fn [m k v] (update-in m [k] conj (vector v)))]\n   ])&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   [nil \&quot;--sno SNO\&quot; \&quot;sheet No.\&quot;]\n   [nil \&quot;--sname SName\&quot; \&quot;sheet name\&quot;\n    :default []\n    :assoc-fn (fn [m k v] (update-in m [k] into (vector v)))]\n   ])&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot; \&quot;--sno\&quot; \&quot;1\&quot; \&quot;--sname\&quot; \&quot;sname01\&quot; \&quot;--sno\&quot; \&quot;2\&quot; \&quot;--sname\&quot; \&quot;sname02\&quot;))&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot; \&quot;--sno\&quot; \&quot;1\&quot; \&quot;--sname\&quot; \&quot;sname04\&quot; \&quot;--sno\&quot; \&quot;2\&quot; \&quot;--sname\&quot; \&quot;sname02\&quot;))&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (or (nil? args) (-&gt; opts :options :help))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [nil \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n   ]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   ;[nil \&quot;--sno SNO\&quot; \&quot;sheet No.\&quot;]\n   ;[nil \&quot;--sname SName\&quot; \&quot;sheet name\&quot;\n   ; :default []\n   ; :assoc-fn (fn [m k v] (update-in m [k] into (vector v)))]\n   ])&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot; \&quot;sno=1\&quot; \&quot;sname=sname04\&quot; \&quot;sno=2\&quot; \&quot;sname=sname02\&quot;))&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1\&quot; \&quot;20170202\&quot; \&quot;20170504\&quot; \&quot;sno=1\&quot; \&quot;sname=sname04\&quot; \&quot;sno=2\&quot; \&quot;sname=sname02\&quot;))&quot; &quot;(let [opts (parse-opts args cli-options-test :in-order  true)]\n  (if (or (nil? args) (-&gt; opts :options :help))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1\&quot; \&quot;dsfsd-sdf\&quot; \&quot;20170504\&quot; \&quot;sno=1\&quot; \&quot;sname=sname04\&quot; \&quot;sno=2\&quot; \&quot;sname=sname02\&quot;))&quot; &quot;(let [opts (parse-opts args cli-options-test\n             ;:in-order  true\n             )]\n  (if (or (nil? args) (-&gt; opts :options :help))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot;], :remote []}}</component>
</project>