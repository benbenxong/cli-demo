<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1498640962132">{:repl-history {:ide [], :local [&quot;(-&gt; (select* dual) (select))&quot; &quot;(-&gt; (select* test1) (select))&quot; &quot;test1&quot; &quot;(ns cli.db\n   (:use korma.db\n         korma.core))&quot; &quot;(defdb ora1 (oracle {:host \&quot;127.0.0.1\&quot; :port \&quot;1521:orcl\&quot;\n                     :make-pool? false :user \&quot;alan\&quot; :password \&quot;alan\&quot;})) &quot; &quot;(declare dual)\n(defentity dual)&quot; &quot;(select dual)&quot; &quot;(declare test1)&quot; &quot;(defentity test1\n           (database :test1 ora1))&quot; &quot;(defentity test1\n           (database ora1))&quot; &quot;(select test1)&quot; &quot;(-&gt; (select* test1) (as-sql))&quot; &quot;(declare TEST1)&quot; &quot;(defentity TEST1)&quot; &quot;(select TEST1)&quot; &quot;(declare DUAL)&quot; &quot;(defentity DUAL)&quot; &quot;(select DUAL)&quot; &quot;(ns cli.db\n   (:require '[clojure.java.jdbc :as jdbc]))&quot; &quot;(def db {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n            :subprotocol    \&quot;oracle\&quot;\n            :subname        \&quot;thin:@127.0.0.1:1521:orcl\&quot;\n            :user               \&quot;alan\&quot;\n            :password       \&quot;alan\&quot;})&quot; &quot;(sql/query db [\&quot;select sysdate from test1\&quot;])&quot; &quot;(def db {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n            :subprotocol    \&quot;oracle:oci\&quot;\n            :subname        \&quot;127.0.0.1:1521:orcl\&quot;\n            :user               \&quot;alan\&quot;\n            :password       \&quot;alan\&quot;})&quot; &quot;(def db {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n            :subprotocol    \&quot;oracle:thin\&quot;\n            :subname        \&quot;127.0.0.1:1521:orcl\&quot;\n            :user               \&quot;alan\&quot;\n            :password       \&quot;alan\&quot;})&quot; &quot;(sql/query db [\&quot;select * from test1\&quot;])&quot; &quot;(println (jdbc/query db [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(sql/query db [\&quot;select sysdate from dual\&quot;])&quot; &quot;(sql/db-connection db1)&quot; &quot;(sql/get-connection db1)&quot; &quot;(sql/get-connection {:connection-uri \&quot;java:oracle:thin:@127.0.0.1:1521:orcl\&quot;})&quot; &quot;(sql/get-connection {:connection db})&quot; &quot;(sql/get-connection {:connection db1})&quot; &quot;(-&gt; (sql/get-connection {:connection db1}) .getJdbcUrl)&quot; &quot;(-&gt; (sql/get-connection {:connection db1}) :datasource .getJdbcUrl)&quot; &quot;(-&gt; (sql/get-connection {:connection db1}) :pool deref :datasource .getJdbcUrl)&quot; &quot;(-&gt; (sql/db-connection {:connection db1}) :pool deref :datasource .getJdbcUrl)&quot; &quot;(-&gt; (sql/db-connection {:connection db}) :pool deref :datasource .getJdbcUrl)&quot; &quot;(-&gt; (sql/db-connection {:connection db}) :pool deref :datasource .getDriverClass)&quot; &quot;(sql/query [\&quot;select * from dual\&quot;])&quot; &quot;(sql/query db [\&quot;select * from dual\&quot;])&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci8\&quot;\n         :subname        \&quot;orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci8\&quot;\n         :subname        \&quot;@orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci8\&quot;\n         :subname        \&quot;:orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci8\&quot;\n         :subname        \&quot;alandb\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.driver.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;alandb\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.driver.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.driver.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;/orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(sql/query db1 [\&quot;select * from dual\&quot;])&quot; &quot;(println (jdbc/query db1 [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;/orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;127.0.0.1:1521:orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;@orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;127.0.0.1:1521:@orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;alandb\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(time (sql/query db [\&quot;select * from test1\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select * from test1\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select count(*) from all_objects\&quot;]))&quot; &quot;(time (sql/query db [\&quot;select count(*) from all_objects\&quot;]))&quot; &quot;(time (sql/query db [\&quot;select count(*) cnt from all_objects\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select count(*) cnt from all_objects\&quot;]))&quot; &quot;(ns cli.db\n   (:require [clojure.java.jdbc :as sql]))&quot; &quot;(def db {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:thin\&quot;\n         :subname        \&quot;127.0.0.1:1521:orcl\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(def db1 {:classname  \&quot;oracle.jdbc.OracleDriver\&quot;\n         :subprotocol    \&quot;oracle:oci\&quot;\n         :subname        \&quot;@alandb\&quot;\n         :user               \&quot;alan\&quot;\n         :password       \&quot;alan\&quot;})&quot; &quot;(println (sql/query db [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(println (sql/query db1 [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(time (sql/query db [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(time (sql/query db1 [\&quot;select sysdate from dual\&quot;]))&quot; &quot;(ns cli.core-test\n  (:refer-clojure :exclude [parse-opts])\n  (:require [clojure.test :refer :all]\n            [clojure.tools.cli :refer [parse-opts]]\n            [cli.core :refer :all]))&quot; &quot;(def cli-options\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql\&quot; \&quot;sql p1\&quot; \&quot;sql str\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   ])&quot; &quot;cli-options&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql\&quot; \&quot;sql p1\&quot; \&quot;sql str\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   ])&quot; &quot;(def args '(\&quot;--help\&quot; \&quot;-sheet sno=1 sname=a1 sno=2 sname=a2\&quot;))&quot; &quot;(parse-opts args cli-options-test)&quot; &quot;(parse-opts args cli-options-test :in-order)&quot; &quot;(def args '(\&quot;--help\&quot; \&quot;sheet sno=1 sname=a1 sno=2 sname=a2\&quot;))&quot; &quot;(def cli-options-test\n  ;; An option with a required argument\n  [[\&quot;-p\&quot; \&quot;--port PORT\&quot; \&quot;Port number\&quot;\n    :default 80\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(&lt; 0 % 0x10000) \&quot;Must be a number between 0 and 65536\&quot;]]\n   ;; A non-idempotent option\n   [\&quot;-v\&quot; nil \&quot;Verbosity level\&quot;\n    :id :verbosity\n    :default 0\n    :assoc-fn (fn [m k _] (update-in m [k] inc))]\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]\n   [\&quot;-s\&quot; \&quot;--sql paras\&quot; \&quot;sql file and parameters\&quot;\n    :default \&quot;\&quot;]\n   [\&quot;-q\&quot; \&quot;--quiet\&quot;\n    :id :verbose\n    :default true\n    :parse-fn not]\n   ])&quot; &quot;(def args '(\&quot;--help\&quot; \&quot;(sheet sno=1 sname=a1 sno=2 sname=a2)\&quot;))&quot; &quot;(def args '(\&quot;--sql\&quot; \&quot;20170202 20170504\&quot;))&quot; &quot;(def args '(\&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot;))&quot; &quot;(parse-opts args cli-options-test :in-order true)&quot; &quot;(:help (parse-opts args cli-options-test ))&quot; &quot;{:help }&quot; &quot;{:help (parse-opts args cli-options-test )}&quot; &quot; (parse-opts args cli-options-test )&quot; &quot;(-&gt; (parse-opts args cli-options-test ) :options)&quot; &quot;(-&gt; (parse-opts args cli-options-test ) :options :help)&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (-&gt; opts :options :help)\n    (-&gt; opts :summary)\n    opts))&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (-&gt; opts :options :help)\n    (do \n      (println \&quot;usage: Query2xls\&quot;)\n      (-&gt; opts :summary))\n    opts))&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (-&gt; opts :options :help)\n    (do \n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(parse-opts '() cli-options-test)&quot; &quot;(parse-opts '(\&quot;-q\&quot;) cli-options-test)&quot; &quot;(def args '())&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (or (-&gt; opts :options :help) (nil? args)\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(def args nil)&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (-&gt; opts :options :help)\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;args&quot; &quot;(nil? args)&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (or (-&gt; opts :options :help) (nil? args))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot; &quot;(def args '(\&quot;-h\&quot; \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot;))&quot; &quot;(def args '( \&quot;--sql\&quot; \&quot;f1 20170202 20170504\&quot;))&quot; &quot;(let [opts (parse-opts args cli-options-test )]\n  (if (or (nil? args) (-&gt; opts :options :help))\n    (do\n      (println \&quot;usage: Query2xls\&quot;)\n      (println (-&gt; opts :summary)))\n    opts))&quot;], :remote []}}</component>
</project>